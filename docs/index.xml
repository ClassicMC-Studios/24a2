<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>24a4 on 24a2 - an ultra minimalist game engine</title>
    <link>http://24a2.routley.io/</link>
    <description>Recent content in 24a4 on 24a2 - an ultra minimalist game engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://24a2.routley.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Color</title>
      <link>http://24a2.routley.io/reference/enums/color/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/reference/enums/color/</guid>
      <description>Index Enumeration members  Black Gray Green Red Yellow  Enumeration members Black • Black: = &amp;ldquo;BLACK&amp;rdquo;
Gray • Gray: = &amp;ldquo;GRAY&amp;rdquo;
Green • Green: = &amp;ldquo;GREEN&amp;rdquo;
Red • Red: = &amp;ldquo;RED&amp;rdquo;
Yellow • Yellow: = &amp;ldquo;YELLOW&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Direction</title>
      <link>http://24a2.routley.io/reference/enums/direction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/reference/enums/direction/</guid>
      <description>Index Enumeration members  Down Left Right Up  Enumeration members Down • Down: = &amp;ldquo;DOWN&amp;rdquo;
Left • Left: = &amp;ldquo;LEFT&amp;rdquo;
Right • Right: = &amp;ldquo;RIGHT&amp;rdquo;
Up • Up: = &amp;ldquo;UP&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Game</title>
      <link>http://24a2.routley.io/reference/classes/game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/reference/classes/game/</guid>
      <description>Game is the object that controls the actual running of the game. You create a new one by passing in a GameConfig. Calling game.run() will start the game.
let config = { create: create, // A function you&amp;#39;ve defined  update: update, // A function you&amp;#39;ve defined } let game = new Game(config) game.run()  Hierarchy  Game  Index Constructors  constructor  Methods  end getFrameCount run setFrameRate setText  Constructors constructor + new Game(config: GameConfig): Game</description>
    </item>
    
    <item>
      <title>GameConfig</title>
      <link>http://24a2.routley.io/reference/interfaces/gameconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/reference/interfaces/gameconfig/</guid>
      <description>GameConfig is the object you pass when contructing a new Game.
Hierarchy  GameConfig  Index Properties  create onDotClicked onKeyPress update  Properties Optional create • create? : undefined | function
create is a function which is called once, just before the game starts running. You can use it to initialise game state, if needed.
Optional onDotClicked • onDotClicked? : undefined | function
onDotClicked is a function which is called when the player clicks on a dot.</description>
    </item>
    
    <item>
      <title>Grid</title>
      <link>http://24a2.routley.io/reference/classes/grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/reference/classes/grid/</guid>
      <description>Hierarchy  Grid  Index Constructors  constructor  Properties  _dots  Methods  _clear _getDotSize _getGridSize _getOffset getDot setDot  Constructors constructor + new Grid(): Grid
Returns: Grid
Properties _dots • _dots: Array‹Array‹Color››
Methods _clear ▸ _clear(): void
Returns: void
_getDotSize ▸ _getDotSize(): number
Returns: number
_getGridSize ▸ _getGridSize(): number
Returns: number
_getOffset ▸ _getOffset(): number
Returns: number
getDot ▸ getDot(x: number, y: number): Color
Parameters:
   Name Type     x number   y number    Returns: Color</description>
    </item>
    
    <item>
      <title>Skiing</title>
      <link>http://24a2.routley.io/games/skiing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/games/skiing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Snake</title>
      <link>http://24a2.routley.io/games/snake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/games/snake/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tutorial</title>
      <link>http://24a2.routley.io/games/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/games/tutorial/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tutorial</title>
      <link>http://24a2.routley.io/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/tutorial/</guid>
      <description>Let&amp;rsquo;s build a simple game using 24a2. In our game, we&amp;rsquo;ll have a player who can move around and collect items. Each item will give the player a number of points. There will also be bad items, which end the game. TODO: metaphor
1. Basic setup 24a2 games are written in JavaScript, and are played in the browser. In this step, we&amp;rsquo;ll create two files, an index.html which stores the content of our webpage, and game.</description>
    </item>
    
  </channel>
</rss>